// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

// User (pengguna aplikasi kecuali admin)
model User {
  id                    String   @id @default(uuid())
  name                  String
  email                 String   @unique
  password              String   @db.VarChar(255)
  lastActiveAt          DateTime @default(now())
  isAdmin               Boolean  @default(false)
  refreshSession        String   @unique @db.VarChar(36)
  bacaanSlokaTerakhirId Int?
  profilePicture        String?

  points            Int @default(0)
  activeStreak      Int @default(0)
  stagesCompleted   Int @default(0)
  quizCompleted     Int @default(0)
  ganeshBotMessages Int @default(0)
  discussionsAsked  Int @default(0)

  bacaanSlokaTerakhir     GitaSloka?                 @relation(fields: [bacaanSlokaTerakhirId], references: [id])
  sessions                ChatSession[]
  slokasLiked             UserLikedGitaSloka[]
  likedDiscussions        UserLikedDiscussion[]
  likedDiscussionsReplies UserLikedDiscussionReply[]
  likedDoas               UserLikedDoa[]
  alarmDoas               AlarmDoa[]
  discussionsCreated      Discussion[]
  kelasDiikuti            UserKelas[]
  kelasDibuat             Kelas[]
  quizzesCreated          Quiz[]
  badges                  UserBadge[]
  doaHomewoks             UserHomeworkDoa[]
  missions                UserMission[]
  notifications           UserNotification[]
  quizzesResult           UserQuizResult[]
  quizEntriesAnswered     UserAnswerQuizEntry[]
  userBuyGift             UserBuyGift[]
  DiscussionReply         DiscussionReply[]
  userClaimsHadiahStage   UserClaimsHadiahStage[]
  userClaimsHadiahQuiz    UserClaimsHadiahQuiz[]
}

// Kumpulan Gita bab
model GitaBab {
  number          Int    @id @default(autoincrement())
  title           String
  titleHindi      String
  summary         String @db.Text
  translationIndo String

  gitaSlokas GitaSloka[]

  @@index([number])
}

// Kumpulan Gita sloka
model GitaSloka {
  id              Int     @id @default(autoincrement())
  number          Int
  numberBab       Int
  content         String  @db.Text
  translationIndo String  @db.Text
  makna           String? @db.Text

  usersLiked UserLikedGitaSloka[]
  bab        GitaBab              @relation(fields: [numberBab], references: [number], onDelete: Cascade)
  User       User[]

  @@unique([number, numberBab])
  @@fulltext([translationIndo, content])
}

// Chat session yang dimiliki oleh user
model ChatSession {
  id        String   @id @default(uuid())
  userId    String
  title     String
  createdAt DateTime @default(now())

  history MessageHistory[]
  user    User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Message history pada suatu chat session
model MessageHistory {
  id        Int    @id @default(autoincrement())
  role      String
  parts     String @db.Text
  sessionId String

  session ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId])
}

// Many to many relationship antara user dan gita sloka (like)
model UserLikedGitaSloka {
  id      Int    @id @default(autoincrement())
  userId  String
  slokaId Int

  user  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  sloka GitaSloka @relation(fields: [slokaId], references: [id], onDelete: Cascade)

  @@unique([userId, slokaId], name: "likedSloka")
}

// Discussion yang dibuat oleh user
model Discussion {
  id           Int      @id @default(autoincrement())
  title        String   @db.VarChar(300)
  createdAt    DateTime @default(now())
  repliesCount Int      @default(0)
  likesCount   Int      @default(0)
  creatorId    String
  kelasId      Int?

  creator   User                  @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  class     Kelas?                @relation(fields: [kelasId], references: [id], onDelete: Cascade)
  replies   DiscussionReply[]
  userLikes UserLikedDiscussion[]

  @@index([creatorId])
  @@fulltext([title])
}

// Many to many relationship antara user dan discussion (like)
model UserLikedDiscussion {
  id           Int    @id @default(autoincrement())
  userId       String
  discussionId Int
  grade        Int?

  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  discussion Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)

  @@unique([userId, discussionId], name: "likedDiscussion")
  @@index([userId, discussionId])
}

// Reply pada suatu discussion
model DiscussionReply {
  id           Int      @id @default(autoincrement())
  discussionId Int
  reply        String   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  likesCount   Int      @default(0)
  creatorId    String

  replies DiscussionReply[] @relation(name: "discussion_reply")

  creator           User                       @relation(fields: [creatorId], references: [id])
  discussion        Discussion                 @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  usersLiked        UserLikedDiscussionReply[]
  DiscussionReply   DiscussionReply?           @relation(name: "discussion_reply", fields: [discussionReplyId], references: [id], onDelete: Cascade)
  discussionReplyId Int?

  @@index([discussionId])
}

// Many to many relationship antara user dan reply (like)
model UserLikedDiscussionReply {
  id                Int    @id @default(autoincrement())
  userId            String
  discussionReplyId Int
  grade             Int?

  reply DiscussionReply @relation(fields: [discussionReplyId], references: [id], onDelete: Cascade)
  user  User            @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, discussionReplyId], name: "likedDiscussionReply")
  @@index([userId, discussionReplyId])
}

// Doa yang bisa dilihat oleh user (ditambahkan oleh admin)
model Doa {
  id            Int     @id @default(autoincrement())
  title         String
  body          String
  makna         String? @db.LongText
  pelafalanFile String

  usersLiked  UserLikedDoa[]
  alarmDoas   AlarmDoa[]
  HomeWorkDoa HomeWorkDoa[]
  // UserHomeworkDoa UserHomeworkDoa[]

  @@index([title])
  @@fulltext([title, body])
}

// Many to many relationship antara user dan doa (like)
model UserLikedDoa {
  id     Int    @id @default(autoincrement())
  userId String
  doaId  Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  doa  Doa  @relation(fields: [doaId], references: [id], onDelete: Cascade)

  @@unique([userId, doaId], name: "likedDoa")
  @@index([userId, doaId])
}

// Alarm doa yang dimiliki oleh user
model AlarmDoa {
  id        Int      @id @default(autoincrement())
  ulangiDoa Int
  doaId     Int?
  userId    String
  active    Boolean  @default(false)
  jam       String
  tugasId   Int?
  createdAt DateTime @default(now())

  tugasDoa HomeWorkDoa? @relation(fields: [tugasId], references: [id])
  doa      Doa?         @relation(fields: [doaId], references: [id], onDelete: SetNull)
  user     User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Kelas {
  id         Int    @id @default(autoincrement())
  name       String
  classCode  String @unique
  pengajarId String

  siswa          UserKelas[]
  pengajar       User          @relation(fields: [pengajarId], references: [id])
  allMateri      Materi[]
  allHomeworkDoa HomeWorkDoa[]
  discussions    Discussion[]
  quizzes        Quiz[]

  @@index([classCode, pengajarId])
}

model UserKelas {
  id      Int    @id @default(autoincrement())
  userId  String
  kelasId Int

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  kelas Kelas @relation(fields: [kelasId], references: [id], onDelete: Cascade)

  @@unique([userId, kelasId])
  @@index([userId])
}

model Stage {
  id                     Int    @id @default(autoincrement())
  materiId               Int?
  description            String
  title                  String
  image_path             String
  points_reward_finished Int    @default(0)
  points_reward_per_quiz Int    @default(0)

  materi                Materi?                 @relation(fields: [materiId], references: [id], onDelete: SetNull)
  Quiz                  Quiz[]
  userClaimsHadiahStage UserClaimsHadiahStage[]
}

model UserClaimsHadiahStage {
  id      Int    @id @default(autoincrement())
  stageId Int
  userId  String

  stage Stage @relation(fields: [stageId], references: [id], onDelete: Cascade)
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, stageId])
}

model Materi {
  id          Int    @id @default(autoincrement())
  videoLink   String
  kelasId     Int?
  description String
  title       String

  kelas Kelas?  @relation(fields: [kelasId], references: [id], onDelete: Cascade)
  Stage Stage[]

  @@index([kelasId])
}

model Quiz {
  id             Int       @id @default(autoincrement())
  userId         String
  fromTemplateId Int?
  kelasId        Int?
  stageId        Int?
  title          String
  createdAt      DateTime  @default(now())
  dueDate        DateTime?
  isDraft        Boolean   @default(false)

  creator              User                   @relation(fields: [userId], references: [id], onDelete: Cascade)
  template             Quiz?                  @relation(fields: [fromTemplateId], references: [id], name: "fromTemplate")
  entries              QuizEntry[]
  quizesUsesAsTemplate Quiz[]                 @relation(name: "fromTemplate")
  userQuizResult       UserQuizResult[]
  kelas                Kelas?                 @relation(fields: [kelasId], references: [id])
  stage                Stage?                 @relation(fields: [stageId], references: [id])
  UserClaimsHadiahQuiz UserClaimsHadiahQuiz[]
}

model QuizEntry {
  id             Int  @id @default(autoincrement())
  quizId         Int
  questionModel  Json
  scoreCorrect   Int
  scoreIncorrect Int  @default(0)

  quiz              Quiz                  @relation(fields: [quizId], references: [id], onDelete: Cascade)
  usersAnsweredQuiz UserAnswerQuizEntry[]
}

model UserClaimsHadiahQuiz {
  id     Int    @id @default(autoincrement())
  quizId Int
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz Quiz @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@unique([userId, quizId])
}

model UserQuizResult {
  id           Int     @id @default(autoincrement())
  completed    Boolean @default(false)
  userId       String
  quizId       Int
  correctCount Int     @default(0)

  user    User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  quiz    Quiz                  @relation(fields: [quizId], references: [id], onDelete: Cascade)
  entries UserAnswerQuizEntry[]

  @@unique([userId, quizId])
}

model UserAnswerQuizEntry {
  id           Int    @id @default(autoincrement())
  quizEntryId  Int    @map("quizId")
  userId       String
  point        Int
  answer       String
  quizResultId Int

  user       User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  quizResult UserQuizResult @relation(fields: [quizResultId], references: [id], onDelete: Cascade)
  quizEntry  QuizEntry      @relation(fields: [quizEntryId], references: [id], onDelete: Cascade)

  @@unique([userId, quizEntryId])
  @@index([userId, quizEntryId])
}

model HomeWorkDoa {
  id       Int      @id @default(autoincrement())
  kelasId  Int
  doaId    Int
  deadline DateTime

  doa           Doa               @relation(fields: [doaId], references: [id], onDelete: Cascade)
  class         Kelas             @relation(fields: [kelasId], references: [id], onDelete: Cascade)
  usersHomework UserHomeworkDoa[]
  alarmDoas     AlarmDoa[]
}

model UserHomeworkDoa {
  id                 Int      @id @default(autoincrement())
  userId             String
  fileRecorded       String?
  documentationImage String?
  grade              Int?
  homeWorkDoaId      Int
  createdAt          DateTime @default(now())

  homework HomeWorkDoa @relation(fields: [homeWorkDoaId], references: [id], onDelete: Cascade)
  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, homeWorkDoaId])
}

model Gift {
  id        Int    @id @default(autoincrement())
  name      String
  thumbnail String
  prize     Int    @default(0)

  userBuyGift UserBuyGift[]
}

enum GiftStatus {
  PENDING
  SUCCESS
}

model UserBuyGift {
  id     Int    @id @default(autoincrement())
  userId String
  giftId Int

  gift   Gift       @relation(fields: [giftId], references: [id], onDelete: Cascade)
  user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  status GiftStatus
}

model BadgeType {
  id          Int    @id @default(autoincrement())
  name        String
  description String @db.Text()
  color       String @default("#FFFFFF")

  badges Badge[]
}

// Lencana
model Badge {
  id          Int    @id @default(autoincrement())
  name        String
  thumbnail   String
  parameter   Int
  badgeTypeId Int

  users UserBadge[]
  type  BadgeType   @relation(fields: [badgeTypeId], references: [id])
}

model UserBadge {
  id        Int      @id @default(autoincrement())
  userId    String
  badgeId   Int
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  badge Badge @relation(fields: [badgeId], references: [id], onDelete: Cascade)
}

model MissionType {
  id   Int    @id @default(autoincrement())
  name String

  missions Mission[]
}

model Mission {
  id            Int @id @default(autoincrement())
  maxProgress   Int
  rewardStars   Int
  missionTypeId Int

  missionType MissionType   @relation(fields: [missionTypeId], references: [id])
  users       UserMission[]
}

model UserMission {
  id        Int    @id @default(autoincrement())
  userId    String
  missionId Int

  mission Mission @relation(fields: [missionId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@unique([userId, missionId], name: "userMission")
}

model UserNotification {
  id        Int      @id @default(autoincrement())
  userId    String
  title     String
  message   String   @db.Text
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
