// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// User (pengguna aplikasi kecuali admin)
model User {
  id                      String                     @id @default(uuid())
  name                    String
  email                   String                     @unique
  password                String                     @db.VarChar(255)
  sessions                ChatSession[]
  slokasLiked             UserLikedGitaSloka[]
  likedDiscussions        UserLikedDiscussion[]
  likedDiscussionsReplies UserLikedDiscussionReply[]
  likedDoas               UserLikedDoa[]
  alarmDoas               AlarmDoa[]
  discussionsCreated      Discussion[]
  points                  Int                        @default(0)
  kelasDiikuti            UserKelas[]
  kelasDibuat             Kelas[]
  quizzesCreated          Quiz[]
  quizTemplates           QuizTemplate[]
  activeStreak            Int                        @default(0)
  lastActiveAt            DateTime                   @default(now())
  badges                  UserBadge[]
  questionsAnswered       UserAnswersQuestion[]
  doaHomewoks             UserHomeworkDoa[]
  isAdmin                 Boolean                    @default(false)
  missions                UserMission[]
  quizzesAnswered         UserAnswersQuiz[]
  UserNotification        UserNotification[]
}

// Kumpulan Gita bab
model GitaBab {
  number          Int         @id @default(autoincrement())
  title           String
  titleHindi      String
  summary         String      @db.Text
  translationIndo String
  gitaSlokas      GitaSloka[]

  @@index([number])
}

// Kumpulan Gita sloka
model GitaSloka {
  id              Int                  @id @default(autoincrement())
  number          Int
  numberBab       Int
  bab             GitaBab              @relation(fields: [numberBab], references: [number], onDelete: Cascade)
  content         String               @db.Text
  translationIndo String               @db.Text
  makna           String?              @db.Text
  usersLiked      UserLikedGitaSloka[]

  @@unique([number, numberBab])
}

// Chat session yang dimiliki oleh user
model ChatSession {
  id        String           @id @default(uuid())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  title     String
  history   MessageHistory[]
  createdAt DateTime         @default(now())

  @@index([userId])
}

// Message history pada suatu chat session
model MessageHistory {
  id        Int         @id @default(autoincrement())
  role      String
  parts     String      @db.Text
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  sessionId String

  @@index([sessionId])
}

// Many to many relationship antara user dan gita sloka (like)
model UserLikedGitaSloka {
  id      Int       @id @default(autoincrement())
  user    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  sloka   GitaSloka @relation(fields: [slokaId], references: [id], onDelete: Cascade)
  slokaId Int
}

// Discussion yang dibuat oleh user
model Discussion {
  id           Int                   @id @default(autoincrement())
  title        String                @db.VarChar(300)
  body         String                @db.Text
  createdAt    DateTime              @default(now())
  repliesCount Int                   @default(0)
  likesCount   Int                   @default(0)
  creator      User                  @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  creatorId    String
  class        Kelas?                @relation(fields: [kelasId], references: [id])
  replies      DiscussionReply[]
  userLikes    UserLikedDiscussion[]
  kelasId      Int?

  @@index([creatorId])
}

// Many to many relationship antara user dan discussion (like)
model UserLikedDiscussion {
  id           Int        @id @default(autoincrement())
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  discussion   Discussion @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  discussionId Int
  grade        Int?

  @@index([userId, discussionId])
}

// Reply pada suatu discussion
model DiscussionReply {
  id           Int      @id @default(autoincrement())
  discussionId Int
  reply        String   @db.Text
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  likesCount   Int      @default(0)

  discussion               Discussion                 @relation(fields: [discussionId], references: [id], onDelete: Cascade)
  UserLikedDiscussionReply UserLikedDiscussionReply[]

  @@index([discussionId])
}

// Many to many relationship antara user dan reply (like)
model UserLikedDiscussionReply {
  id                Int             @id @default(autoincrement())
  user              User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  reply             DiscussionReply @relation(fields: [discussionReplyId], references: [id], onDelete: Cascade)
  discussionReplyId Int

  @@index([userId, discussionReplyId])
}

// Doa yang bisa dilihat oleh user (ditambahkan oleh admin)
model Doa {
  id              Int               @id @default(autoincrement())
  title           String
  body            String
  usersLiked      UserLikedDoa[]
  pelafalanFile   String?
  alarmDoas       AlarmDoa[]
  HomeWorkDoa     HomeWorkDoa[]
  UserHomeworkDoa UserHomeworkDoa[]

  @@index([title])
}

// Many to many relationship antara user dan doa (like)
model UserLikedDoa {
  id     Int    @id @default(autoincrement())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  doa    Doa    @relation(fields: [doaId], references: [id], onDelete: Cascade)
  doaId  Int

  @@index([userId, doaId])
}

// Alarm doa yang dimiliki oleh user
model AlarmDoa {
  id        Int      @id @default(autoincrement())
  ulangiDoa Int
  doa       Doa      @relation(fields: [doaId], references: [id], onDelete: Cascade)
  doaId     Int
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  active    Boolean  @default(false)
  jam       DateTime @default(now())

  @@index([userId])
}

model Kelas {
  id             Int           @id @default(autoincrement())
  name           String
  classCode      String        @unique
  siswa          UserKelas[]
  pengajar       User          @relation(fields: [pengajarId], references: [id])
  pengajarId     String
  allMateri      Materi[]
  allHomeworkDoa HomeWorkDoa[]
  Discussion     Discussion[]
}

model UserKelas {
  id      Int    @id @default(autoincrement())
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId  String
  kelas   Kelas  @relation(fields: [kelasId], references: [id], onDelete: Cascade)
  kelasId Int
}

model Materi {
  id            Int            @id @default(autoincrement())
  videoLink     String
  kelas         Kelas          @relation(fields: [kelasId], references: [id])
  kelasId       Int
  description   String
  title         String
  quizzes       Quiz[]
  quizTemplates QuizTemplate[]
}

model QuizTemplate {
  id       Int     @id @default(autoincrement())
  question String
  creator  User    @relation(fields: [userId], references: [id])
  userId   String
  materi   Materi? @relation(fields: [materiId], references: [id])
  materiId Int?
}

model Quiz {
  id            Int               @id @default(autoincrement())
  question      String
  creator       User              @relation(fields: [creatorId], references: [id])
  creatorId     String
  materi        Materi?           @relation(fields: [materiId], references: [id])
  materiId      Int?
  questions     Question[]
  startedAt     DateTime?
  timeLimit     Int
  usersAnswered UserAnswersQuiz[]
}

model UserAnswersQuiz {
  id     Int    @id @default(autoincrement())
  quiz   Quiz   @relation(fields: [quizId], references: [id])
  quizId Int
  user   User   @relation(fields: [userId], references: [id])
  userId String
  score  Int
}

model Question {
  id            Int                   @id @default(autoincrement())
  quiz          Quiz                  @relation(fields: [quizId], references: [id])
  quizId        Int
  answer        String
  question      Json
  point         Int
  usersAnswered UserAnswersQuestion[]
}

model UserAnswersQuestion {
  id         Int      @id @default(autoincrement())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  question   Question @relation(fields: [questionId], references: [id])
  questionId Int
  answer     String
}

model HomeWorkDoa {
  id            Int               @id @default(autoincrement())
  class         Kelas             @relation(fields: [kelasId], references: [id])
  kelasId       Int
  doa           Doa               @relation(fields: [doaId], references: [id])
  doaId         Int
  deadline      DateTime
  usersHomework UserHomeworkDoa[]
}

model UserHomeworkDoa {
  id                 Int         @id @default(autoincrement())
  user               User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  homework           HomeWorkDoa @relation(fields: [homeWorkDoaId], references: [id])
  timeSetAt          DateTime    @default(now())
  fileRecorded       String?
  documentationImage String?
  Doa                Doa?        @relation(fields: [doaId], references: [id])
  doaId              Int?
  homeWorkDoaId      Int
  grade              Int?
}

model Gift {
  id        Int    @id @default(autoincrement())
  name      String
  thumbnail String
  prize     Int    @default(0)
}

// Lencana
model Badge {
  id        Int         @id @default(autoincrement())
  name      String
  thumbnail String
  rule      String
  users     UserBadge[]
}

model UserBadge {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String
  badge     Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  badgeId   Int
  createdAt DateTime @default(now())
}

model Mission {
  id          Int           @id @default(autoincrement())
  name        String
  maxProgress Int
  users       UserMission[]
  rewardStars Int
}

model UserMission {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  mission   Mission  @relation(fields: [missionId], references: [id])
  missionId Int
  progress  Int
  createdAt DateTime @default(now())
}

model UserNotification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  title     String
  message   String   @db.Text
  createdAt DateTime @default(now())
}
